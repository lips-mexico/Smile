{"version":3,"file":"smile.css","sources":["main.scss","utils/layouts.scss","utils/error.scss","utils/helper.scss","core/a.scss"],"sourcesContent":["// =====================================================================================================\n//    __  __       _\n//   |  \\/  | __ _(_)_ __\n//   | |\\/| |/ _` | | '_ \\\n//   | |  | | (_| | | | | |\n//   |_|  |_|\\__,_|_|_| |_|\n//\n// =====================================================================================================\n// Utilities\n@import 'utils/layouts';\n@import 'utils/error';\n@import 'utils/helper';\n@import 'core/a';\n","// =====================================================================================================\n//    _                            _\n//   | |    __ _ _   _  ___  _   _| |_ ___\n//   | |   / _` | | | |/ _ \\| | | | __/ __|\n//   | |__| (_| | |_| | (_) | |_| | |_\\__ \\\n//   |_____\\__,_|\\__, |\\___/ \\__,_|\\__|___/\n//               |___/\n// =====================================================================================================\n// Dependencies\n@import 'error';\n// -----------------------------------------------------------------------------------------------------\n/// Determines the standard unit of measurement.\n/// @name unit\n/// @type number - Pixels\n$unit: 24px;\n/// Contains the minimum width value for the standard spaces.\n/// @name sizes\n/// @type map\n$sizes: (\n  hand: 320px,\n  page: 600px,\n  book: 900px,\n  desk: 1200px,\n  wide: 1800px\n);\n/// Contains the maximum width value for the standard spaces.\n/// @name max-sizes\n/// @type map\n$max-sizes: (\n  hand: 599px,\n  page: 899px,\n  book: 1199px,\n  desk: 1799px,\n  wide: 3000px\n);\n// -----------------------------------------------------------------------------------------------------\n/// Looks for a the limit value of a space's width. Default returns the lower limit, the $max variable\n/// controls when to return the upper limit.\n/// @name measure\n/// @param {string} space [null] - Name of the space that needs to be measured.\n/// @param {bool} max [false] - Returns the upper limit of the space's width.\n/// @example scss - Sass\n///   div {\n///     &.min {\n///       width: measure($space: hand);\n///     }\n///     &.max {\n///       width: measure($space: hand, $max: true);\n///     }\n///   }\n/// @example css - Compiled CSS\n///   div.min {\n///     width: 320px;\n///   }\n///   div.max {\n///     width: 599px;\n///   }\n///\n@function measure($space: null, $max: false) {\n  @if ($max) {\n    @if (map-has-key($max-sizes, $space)) {\n      @return map-get($max-sizes, $space);\n    } @else {\n      @return throw('Unknown space size selected.', value);\n    }\n  } @else {\n    @if (map-has-key($sizes, $space)) {\n      @return map-get($sizes, $space);\n    } @else {\n      @return throw('Unknown space size selected.', value);\n    }\n  }\n}\n// -----------------------------------------------------------------------------------------------------\n/// Creates the correct media query according to a space size input. The exact values will be the\n/// limits of said space in pixels. Devices with screens smaller than 320px are not going to be handled\n/// by the 'display-on()' function. Correct input values are: hand, page, book, desk, and wide.\n/// @name display-on\n/// @param {string} size [null] - Space size that will be used to create a media query.\n/// @param {string} until [null] - Optional space size used to extend $size space to a larger limit.\n/// @content\n/// @output - Media query with a range width according to standard of space sizes.\n/// @example scss - Sass\n///   div {\n///     @include display-on(page, $until: desk) {\n///       // Style\n///     }\n///   }\n/// @example css - Compiled CSS\n///   div {\n///     @media (min-width: 600px) and (max-width: 1799px) {\n///       // Style\n///     }\n///   }\n///\n@mixin display-on($size, $until: null) {\n  // Will contain the interior of the media query or will remain null in case of an exception.\n  $mq: null;\n  @if ($size == $until) {\n    content: throw(\n      'This media query has redundant information. ‘display-on(#{$size})’',\n      value\n    );\n  } @else if ($size == hand) and ($until == wide) {\n    content: throw(\n      'This media query is redundant, it includes all devices.',\n      value\n    );\n  }\n  @if $until {\n    // Obtains pixel values\n    $s-device: measure($size);\n    $l-until: measure($until, true);\n    // Value validation\n    @if ($s-device > $l-until) {\n      content: throw(\n        'Did you mean ‘display-on(#{$until}, $until: #{$size})’? This media query contains wrong syntax, the value of the ‘until’ parameter should be larger than the value of the ‘size’ parameter.',\n        value\n      );\n    }\n    // Buids media query\n    $mq: '(min-width: #{$s-device}) and (max-width: #{$l-until})';\n  } @else {\n    // Obtains pixel values\n    $s-device: measure($size);\n    $l-device: measure($size, true);\n    // Buids media query\n    $mq: '(min-width: #{$s-device}) and (max-width: #{$l-device})';\n  }\n  @if mq {\n    @media #{$mq} {\n      @content;\n    }\n  }\n}\n// -----------------------------------------------------------------------------------------------------\n/// Sets the correct grid attributes depending on the amount of columns and offset spaces.\n/// @name grid\n/// @param {number} $columns [0] - Amount of columns, can only be 4, 8 or 12.\n/// @param {number} $offset-mutiplier [0] - This number multiplied by 24px will become the grid’s ///\n/// margin and offset.\n/// @output - Displays a grid and sets it's columns, gap and padding.\n/// @example scss - Sass\n///   div {\n///     @include grid(12, 4);\n///   }\n/// @example css - Compiled CSS\n///   div {\n///     width: 100%;\n///     display: grid;\n///     grid-gap: 24px;\n///     grid-template-columns: 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr;\n///     padding-left: 96px;\n///     padding-right: 96px;\n///   }\n///\n@mixin grid($columns: 0, $offset-multiplier: 0) {\n  @if ($columns != 4) and ($columns != 8) and ($columns != 12) {\n    content: throw('', value);\n  } @else if (($offset-multiplier > 0) and ($offset-multiplier <= 16)) == false\n  {\n    content: throw('', value);\n  } @else {\n    display: grid;\n    grid-gap: $unit;\n    @if ($columns == 4) {\n      grid-template-columns: 1fr 1fr 1fr 1fr;\n    } @else if ($columns == 8) {\n      grid-template-columns: 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr;\n    } @else if ($columns == 12) {\n      grid-template-columns: 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr;\n    } @else {\n      content: throw('', value);\n    }\n    padding-left: $unit * $offset-multiplier;\n    padding-right: $unit * $offset-multiplier;\n    width: 100%;\n  }\n}\n","// =====================================================================================================\n//    _____                       _   _                 _ _ _\n//   | ____|_ __ _ __ ___  _ __  | | | | __ _ _ __   __| | (_)_ __   __ _\n//   |  _| | '__| '__/ _ \\| '__| | |_| |/ _` | '_ \\ / _` | | | '_ \\ / _` |\n//   | |___| |  | | | (_) | |    |  _  | (_| | | | | (_| | | | | | | (_| |\n//   |_____|_|  |_|  \\___/|_|    |_| |_|\\__,_|_| |_|\\__,_|_|_|_| |_|\\__, |\n//                                                                  |___/\n// =====================================================================================================\n// Dependencies\n@import 'helper';\n// -----------------------------------------------------------------------------------------------------\n/// The testing mode controls weather the errors are handled using @error and interrupt the\n/// compilation (false) or @debug while on testing mode (true).\n/// @name testing-mode\n/// @type bool\n$testing-mode: true;\n/// Error types and descriptions of their usage.\n/// * __Value:__ A variable or parameter in quetion had the wrong value range or data type.\n/// * __Handling:__ Error related to error handling.\n/// @name error-types\n/// @type list\n$error-types: ('value', 'handling');\n// -----------------------------------------------------------------------------------------------------\n/// Reports and handles @errors and @debugs. Constructs their content using a message and a type.\n/// @name throw\n/// @param {string} message ['Unkown error.'] - The text message that is displayed in the @error or\n/// @debug.\n/// @param {string} error-type ['none'] - Has to be one of the types of errors inside the Error Handling\n/// Standard.\n/// @example scss - Sass\n///   @mixin set-width($width) {\n///     @if ($width == 0) {\n///       content: throw('Can't convert value 0 to pixels.', value);\n///     } @else {\n///       width: $width;\n///     }\n///   }\n///   div {\n///     @include set-width(0);\n///   }\n/// @example css - Console message\n///   Value Error: Can't Convert value 0 to pixels.\n///\n@function throw($message: 'Unkown error.', $error-type: 'none') {\n  // Verifies that $error-type is valid and part of the standard.\n  @if index($error-types, $error-type) == null {\n    @return throw($message, 'handling');\n  }\n  $final-message: '' + capitalize($error-type) + ' Error: ' + $message;\n  @if $testing-mode == false {\n    @error ($final-message);\n  }\n  @return $final-message;\n}\n","// =====================================================================================================\n//    _   _      _\n//   | | | | ___| |_ __   ___ _ __\n//   | |_| |/ _ \\ | '_ \\ / _ \\ '__|\n//   |  _  |  __/ | |_) |  __/ |\n//   |_| |_|\\___|_| .__/ \\___|_|\n//                |_|\n// =====================================================================================================\n\n// -----------------------------------------------------------------------------------------------------\n/// Turns the first letter of a word into uppercase.\n/// @name capitalize\n/// @param {string} $string [null] - The word that is going to be capitalized.\n/// @example scss - Sass\n///   p {\n///     &::after {\n///       content: capitalize(lips);\n///     }\n///   }\n/// @example css - Compiled CSS\n///   p::after {\n///     content: \"Lips\";\n///   }\n///\n@function capitalize($string: null) {\n  @return to-upper-case(str-slice($string, 1, 1)) + str-slice($string, 2);\n}\n","// Test style for gulp function\ndiv {\n  p {\n    font-size: 24px;\n    color: red;\n  }\n}\n"],"names":[],"mappings":"AICA,AACE,GADC,CACD,CAAC,CAAC;EACA,SAAS,EAAE,IAAI;EACf,KAAK,EAAE,GAAG,GACX"}